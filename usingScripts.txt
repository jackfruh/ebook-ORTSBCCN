== Introduction to Blender Scripting

Blender is a powerful open-source 3D computer graphics software that is widely used for creating stunning visual effects, animations, and interactive applications. While its user-friendly interface offers a wide range of tools and features, Blender's true potential is unlocked through scripting. Blender scripting allows users to automate repetitive tasks, create custom tools, and extend the software's capabilities to suit their specific needs.

Blender provides a Python API (Application Programming Interface) that enables users to interact with its internal functionalities and control almost every aspect of the software programmatically. Whether you're a beginner or an experienced programmer, Blender scripting offers a flexible and efficient way to work with 3D objects, materials, animations, and much more.

With scripting, you can perform complex operations that would be tedious or time-consuming to achieve manually. By writing scripts, you can create intricate scenes, generate realistic simulations within the Blender environment. Whether you're an artist, animator, or game developer, mastering Blender scripting opens up a world of possibilities for creative expression and efficiency in your workflow.

In this section, we will explore the fundamentals of Blender scripting, starting from the basics and gradually diving into more advanced concepts. We will cover essential topics such as accessing and manipulating objects, materials, and animations, as well as exploring scripting techniques for creating custom tools and add-ons. Throughout the journey, we will provide practical examples and useful tips to help you apply your newfound knowledge effectively.

Before diving into Blender scripting, it's recommended to have a basic understanding of the Python programming language. However, even if you're new to programming, this guide will provide you with the necessary foundations to get started.

Whether you're looking to automate repetitive tasks, create complex scenes, or extend Blender's functionality, Blender scripting is a valuable skill that can enhance your workflow and unleash your creative potential. So let's embark on this exciting journey into the world of Blender scripting and unlock the true power of Blender!


=== Running a Script inside Blender

To run a Blender script, follow these steps:


* Open Blender: Launch the Blender application on your computer. Ensure you have the latest version of Blender installed to have access to the most up-to-date features and improvements.

* Open the Text Editor: Once Blender is open, locate the Text Editor. You can find it by selecting the "Scripting" workspace from the top bar or by navigating to the "Editor Type" dropdown at the top left of any editor area and choosing "Text Editor".

* Create a New Text Block: In the Text Editor, click on the "New" button to create a new text block. This will provide you with a clean space to write or paste your script.

* Write or Import your Script: You have two options here:
a. Write the script: If you're familiar with Python scripting, you can directly write your script in the Text Editor. Ensure that your script follows the correct syntax and indentation rules of the Python language.
b. Import an existing script: If you have a pre-existing script saved as a file on your computer, you can open it in the Text Editor by clicking on the "Open" button and navigating to the script's location.

* Run the Script: Once you have your script ready in the Text Editor, you can run it by clicking on the "Run Script" button or by using the keyboard shortcut Alt+P. Blender will execute the script, and its functionality will take effect within the Blender environment.

* Observe the Results: Depending on the script you've written or imported, you will see the desired outcome within the Blender interface. This could involve creating or modifying objects, materials, animations, or any other aspect of the 3D scene.

[NOTE]
It's important to ensure that your script interacts with Blender's API correctly and that it doesn't contain any errors that might cause unexpected behavior or crashes. Always double-check your code for syntax errors or logic mistakes before running it.

By following these steps, you can easily run a Blender script and leverage the power of scripting to automate tasks, create custom tools, or extend Blender's functionality to suit your specific needs.

[.Example 1]

Fixing Material errors

Lets say you have done some steps with your project that involved multiple copys of the same object to be placed.  Lets also say that these parts actually came from another model so you ended up using a COPY/PASTE operation to get them into your scene.  With this as our background, when is the eventual issue that we encounter?

Well, one thing that happens when you COPY/PASTE, is that your parts get renamed to be unique and your Material Reference gets Duplicated the same way.  So if your project has been using a Material named MAIN... you will likely end up with a material named MAIN01 on any opjects that were duplicated using COPY/PASTE instead of a DUPLICATE opertation.

[TIP]
Duplicate objects are created by using btn:[SHIFT] + btn:[D] and it will not try to create a unique Material.

So, if you can to fix this issue so you don't end up with 20 materials that are all actually 100% identical, you can run the following script:

[source,python]
----
import bpy

# Get the currently active material or create a new one
material_name = "main"  # Replace with your desired material name
material = bpy.data.materials.get(material_name)
if material is None:
    material = bpy.data.materials.new(name=material_name)

# Assign the material to each selected object
selected_objects = bpy.context.selected_objects
for obj in selected_objects:
    if obj.type == 'MESH':
        if obj.data.materials:
            # If the object already has materials, replace the first one
            obj.data.materials[0] = material
        else:
            # If the object has no materials, assign the new material
            obj.data.materials.append(material)
----


Now selected materials will just have the one assignment of your choosing.